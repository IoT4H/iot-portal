name: Docker Image CI

on:
  push:
    branches: [ "main", "develop" ]
    tags: ["*"]


jobs:
  # This pushes the image to GitHub Packages.
  generate-version:
    runs-on: ubuntu-latest
    env:
      VERSION: ''
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate version for development build
        id: generate-dev-version
        if: env.VERSION == ''
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          printf "Generated Version: %s\n" "$VERSION"
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      #
    strategy:
      matrix:
        include:
          - name: backend
            context: ./strapi-backend
            dockerfile: Dockerfile
            image: portal-api
          - name: frontend
            context: ./frontend
            dockerfile: Dockerfile
            image: portal-ui
          - name: littlefs-creator
            context: ./littlefs-data-creator
            dockerfile: Dockerfile
            image: portal-littlefs-creator
    env:
      TAG: ${{needs.generate-version.outputs.version}}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Active buildx build
        run: docker buildx create --use
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          cache-from: type=registry,ref=${{env.GHCR_REPO_NAME}}/${{ matrix.image }}:${{ github.ref_name }}-buildcache
          cache-to: type=registry,ref=${{env.GHCR_REPO_NAME}}/${{ matrix.image }}:${{ github.ref_name }}-buildcache,mode=max
          build-args: |
            APP_VERSION=${{needs.generate-version.outputs.version}}
          tags: ${{env.GHCR_REPO_NAME}}/${{ matrix.image }}:${{env.TAG}}
